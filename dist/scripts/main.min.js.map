{"version":3,"sources":["main.js"],"names":["myPlaces","coords","lat","lng","name","ViewModel","self","this","markers","ko","observableArray","init","bounds","google","maps","LatLngBounds","center","LatLng","mapOptions","mapTypeControl","mapTypeControlOptions","position","ControlPosition","BOTTOM_CENTER","style","MapTypeControlStyle","HORIZONTAL_BAR","scaleControl","streetViewControl","streetViewControlOptions","RIGHT_CENTER","zoom","zoomControl","zoomControlOptions","map","Map","document","getElementById","$","each","key","data","marker","Marker","animation","Animation","DROP","listVisible","observable","extend","thisPlaceDescription","infoWindowContent","wikiArticles","thisPlaceName","wikiURL","ajax","dataType","success","response","i","article","push","url","done","join","fail","infowindow","InfoWindow","event","addListener","panTo","getPosition","setAnimation","BOUNCE","setTimeout","setContent","open","centerMap","fitBounds","setPlace","trigger","searchQuery","searchQueryFilter","computed","toLowerCase","searchLoad","userInput","forEach","eachMarker","indexOf","setMap","initMap","mapsAPIError","alert","applyBindings"],"mappings":"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","file":"main.min.js","sourcesContent":["// Setting a list of places that I'm interested\nvar myPlaces = [\n    {\n        coords: {\n            lat: 37.781362,\n            lng: -122.416980\n        },\n        name  : 'Philz Coffee'\n    }, {\n        coords: {\n            lat: 37.827603,\n            lng: -122.422895\n        },\n        name  : 'Alcatraz Island'\n    }, {\n        coords: {\n            lat: 37.808817,\n            lng: -122.409800\n        },\n        name  : 'PIER 39'\n    }, {\n        coords: {\n            lat: 37.820081,\n            lng: -122.478255\n        },\n        name  : 'Golden Gate Bridge'\n    }, {\n        coords: {\n            lat: 37.769268,\n            lng: -122.486278\n        },\n        name  : 'Golden Gate Park'\n    }\n];\n// Knockout ViewModel\nvar ViewModel = function () {\n    var self = this;\n\n    // Markers variable\n\n    self.markers           = ko.observableArray([]);\n\n    // GOOGLE MAPS BELLOW\n\n    self.init              = function () {\n\n        // Bounds Variable for map fitting in screens\n\n        var bounds = new google\n            .maps\n            .LatLngBounds();\n\n        // Here I set the maps center option, this will be the initial place of the map.\n\n        self.center = new google\n            .maps\n            .LatLng(37.805316, -122.445270);\n        // In the mapOptions var I set the custom options for the Google Maps Object\n        var mapOptions = {\n            center                  : self.center,\n            mapTypeControl          : true,\n            mapTypeControlOptions   : {\n                position: google.maps.ControlPosition.BOTTOM_CENTER,\n                style   : google.maps.MapTypeControlStyle.HORIZONTAL_BAR\n            },\n            scaleControl            : true,\n            streetViewControl       : true,\n            streetViewControlOptions: {\n                position: google.maps.ControlPosition.RIGHT_CENTER\n            },\n            zoom                    : 13,\n            zoomControl             : true,\n            zoomControlOptions      : {\n                position: google.maps.ControlPosition.RIGHT_CENTER\n            }\n        };\n\n        // Here I create a Google Maps Object with the mapOptions\n\n        self.map = new google\n            .maps\n            .Map(document.getElementById('map'), mapOptions);\n\n        // Create the markers and push it into self.markers array\n\n        $.each(myPlaces, function (key, data) {\n            var marker = new google\n                .maps\n                .Marker({\n                    animation  : google.maps.Animation.DROP,\n                    listVisible: ko.observable(true),\n                    map        : self.map,\n                    name       : data.name,\n                    position   : new google\n                        .maps\n                        .LatLng(data.coords.lat, data.coords.lng)\n                });\n            bounds.extend(marker.position);\n\n            // Variables that I use to create the infoWindow and it's content\n\n            var wikiArticles  = [],\n                thisPlaceDescription,\n                thisPlaceName = data.name,\n                infoWindowContent;\n\n            // Wiki URL for the open search, here we find the info in json\n\n            var wikiURL = 'http://en.wikipedia.org/w/api.php?format=json&action=opensearch&search=' + thisPlaceName;\n\n            // Getting the info from Wikipedia\n            $.ajax({\n                dataType: \"jsonp\",\n                success : function (response) {\n                    i = 0;\n                    for (var article in response[1]) {\n                        i++;\n\n                        // Limiting Results to 5\n\n                        if (i <= 5) {\n\n                            // Here I push list items to the wikiArticles Array\n\n                            wikiArticles.push(\"<li><a target='_blank' href='http://en.wikipedia.org/wiki/\" + response[1][article] + \"'>\" + response[1][article] + \"</a></li>\");\n                        }\n\n                        // Here I get the description of the first result from Wikipedia\n\n                        if (i === 1) {\n                            thisPlaceDescription = response[2][article];\n                        }\n                    }\n\n                },\n                    url     : wikiURL\n                })\n                .done(function (data) {\n                    // Update the infoWindow content\n\n                    infoWindowContent = '<h5>' + thisPlaceName + '</h5> <h6>Wikipedia Description:</h6> <p>' + thisPlaceDescription + '</p> <p>Wikipedia Articles related to this location:</p><ul>' + wikiArticles.join('') + '</ul>';\n\n                })\n                .fail(function () {\n                    // Just in case the info doesn't load from the Wikipedia API, we have already\n                    // set a infoWindow content.\n                    infoWindowContent = '<h5>' + thisPlaceName + '</h5> <p>Ops... Unable to reach Wikipedia info</p>';\n                });\n            $.ajax({});\n\n            self.infowindow = new google\n                .maps\n                .InfoWindow();\n            google\n                .maps\n                .event\n                .addListener(marker, 'click', function () {\n                    self\n                        .map\n                        .panTo(marker.getPosition());\n\n                    // Makes the marker animate 2 times\n\n                    marker.setAnimation(google.maps.Animation.BOUNCE);\n                    setTimeout(function () {\n                        marker.setAnimation(null);\n                    }, 1400);\n\n                    // Set the InfoWindow Content\n\n                    self\n                        .infowindow\n                        .setContent(infoWindowContent);\n\n                    self\n                        .infowindow\n                        .open(self.map, this);\n                });\n            // Pushes markers to array\n            self\n                .markers\n                .push(marker);\n        });\n\n        // Event that makes the map center load the original value when closing a\n        // infowindow\n\n        google\n            .maps\n            .event\n            .addListener(self.infowindow, 'closeclick', function () {\n                self.centerMap();\n            });\n\n        // Lets fit the map in screens\n\n        self\n            .map\n            .fitBounds(bounds);\n    };\n\n    // Function for the Click Event\n\n    self.setPlace          = function (marker) {\n        google\n            .maps\n            .event\n            .trigger(marker, 'click');\n    };\n\n    // Function for changing the map position\n\n    self.centerMap         = function () {\n        self\n            .map\n            .panTo(self.center);\n    };\n\n    self.searchQuery       = ko.observable('');\n    self.searchQueryFilter = ko.computed(function () {\n\n        return self\n            .searchQuery()\n            .toLowerCase();\n\n    });\n\n    // Search function that is run when user inserts a search query\n\n    self.searchLoad        = ko.computed(function () {\n\n        var userInput = self.searchQueryFilter();\n\n        self\n            .markers()\n            .forEach(function (marker) {\n                var eachMarker = marker\n                    .name\n                    .toLowerCase();\n                (eachMarker.indexOf(userInput) === -1)\n                    ? marker.setMap(null)\n                    : marker.setMap(self.map);\n                (eachMarker.indexOf(userInput) === -1)\n                    ? marker.listVisible(false)\n                    : marker.listVisible(true);\n\n            });\n    }, this);\n    initMap                = function () {\n        self.init();\n    };\n    mapsAPIError = function(){\n        alert('Maps API failed to load!');\n    }\n};\n\n$(ko.applyBindings(new ViewModel()));"],"sourceRoot":"/source/"}