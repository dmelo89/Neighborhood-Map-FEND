{"version":3,"sources":["main.js"],"names":["myPlaces","coords","lat","lng","name","ViewModel","self","this","center","google","maps","LatLng","init","mapOptions","mapTypeControl","mapTypeControlOptions","position","ControlPosition","BOTTOM_CENTER","style","MapTypeControlStyle","HORIZONTAL_BAR","scaleControl","streetViewControl","streetViewControlOptions","RIGHT_CENTER","zoom","zoomControl","zoomControlOptions","map","Map","document","getElementById","markers","ko","observableArray","$","each","key","data","thisPlaceDescription","marker","Marker","animation","Animation","DROP","listVisible","observable","wikiArticles","thisPlaceName","infoWindowContent","wikiURL","ajax","dataType","success","response","i","article","push","join","url","infowindow","InfoWindow","event","addListener","panTo","getPosition","setAnimation","BOUNCE","setTimeout","setContent","open","centerMap","setPlace","trigger","searchQuery","searchQueryFilter","computed","toLowerCase","searchLoad","userInput","forEach","eachMarker","indexOf","setMap","applyBindings"],"mappings":"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","file":"main.min.js","sourcesContent":["var myPlaces = [\n    {\n        coords: {\n            lat: 37.781362,\n            lng: -122.416980\n        },\n        name  : 'Philz Coffee'\n    }, {\n        coords: {\n            lat: 37.827603,\n            lng: -122.422895\n        },\n        name  : 'Alcatraz Island'\n    }, {\n        coords: {\n            lat: 37.808817,\n            lng: -122.409800\n        },\n        name  : 'PIER 39'\n    }, {\n        coords: {\n            lat: 37.820081,\n            lng: -122.478255\n        },\n        name  : 'Golden Gate Bridge'\n    }, {\n        coords: {\n            lat: 37.769268,\n            lng: -122.486278\n        },\n        name  : 'Golden Gate Park'\n    }\n]\nvar ViewModel = function () {\n    var self = this;\n\n    // GOOGLE MAPS BELLOW Here I set the maps center opition, this will be the\n    // initial place of the map.\n\n    self.center            = new google\n        .maps\n        .LatLng(37.805316, -122.445270);\n\n    self.init              = function () {\n\n        // In the mapOptions var I set the custom options for the Google Maps Object\n        var mapOptions = {\n            center                  : self.center,\n            mapTypeControl          : true,\n            mapTypeControlOptions   : {\n                position: google.maps.ControlPosition.BOTTOM_CENTER,\n                style   : google.maps.MapTypeControlStyle.HORIZONTAL_BAR\n            },\n            scaleControl            : true,\n            streetViewControl       : true,\n            streetViewControlOptions: {\n                position: google.maps.ControlPosition.RIGHT_CENTER\n            },\n            zoom                    : 13,\n            zoomControl             : true,\n            zoomControlOptions      : {\n                position: google.maps.ControlPosition.RIGHT_CENTER\n            }\n        };\n\n        // Here I create a Google Maps Object with the mapOptions\n\n        self.map     = new google\n            .maps\n            .Map(document.getElementById('map'), mapOptions);\n\n        self.markers = ko.observableArray([]);\n\n\n        // Create the markers and push it into self.markers array\n\n        $.each(myPlaces, function (key, data) {\n            var marker = new google\n                .maps\n                .Marker({\n                    animation  : google.maps.Animation.DROP,\n                    listVisible: ko.observable(true),\n                    map        : self.map,\n                    name       : data.name,\n                    position   : new google\n                        .maps\n                        .LatLng(data.coords.lat, data.coords.lng)\n                });\n            // Bind a infowindow object and animation for marker\n            var wikiArticles = [];\n            var thisPlaceDescription;\n            var thisPlaceName = data.name;\n\n            // Just in case the info doesn't load from the Wikipedia API, we have already set a infoWindow content.\n\n            var infoWindowContent = '<h5>' + thisPlaceName + '</h5> <p>Ops... Unable to reach Wikipedia info</p>';\n            \n            // Wiki URL for the open search, here we find the info in json\n\n            var wikiURL = 'http://en.wikipedia.org/w/api.php?format=json&action=opensearch&search=' + thisPlaceName;\n\n            // Getting the info from Wikipedia\n\n            $.ajax({\n                dataType: \"jsonp\",\n                success : function (response) {\n                    i = 0;\n                    for (article in response[1]) {\n                        i++\n                        // Limiting Results to 5\n                        if (i <= 5) {\n                        // Here I push list items to the wikiArticles Array\n                        wikiArticles.push(\"<li><a target='_blank' href='http://en.wikipedia.org/wiki/\" + response[1][article] + \"'>\" + response[1][article] + \"</a></li>\");\n                        }\n                        // Here I get the description of the First result from Wikipedia\n                        if (i === 1) {\n                            thisPlaceDescription = response[2][article];\n                        }\n                    }\n                    infoWindowContent = '<h5>' + thisPlaceName + '</h5> <h6>Wikipedia Description:</h6> <p>' + thisPlaceDescription +'</p> <p>Wikipedia Articles related to this location:</p><ul>'+ wikiArticles.join('') +'</ul>';\n                },\n                url     : wikiURL\n            });\n\n            self.infowindow = new google\n                .maps\n                .InfoWindow();\n            google\n                .maps\n                .event\n                .addListener(marker, 'click', function () {\n                    self\n                        .map\n                        .panTo(marker.getPosition());\n\n                    // Makes the marker animate for 3 seconds\n\n                    marker.setAnimation(google.maps.Animation.BOUNCE);\n                    setTimeout(function () {\n                        marker.setAnimation(null);\n                    }, 3000);\n\n                    // Set the InfoWindow Content\n\n                    self\n                        .infowindow\n                        .setContent(infoWindowContent);\n\n                    self\n                        .infowindow\n                        .open(self.map, this);\n                });\n            // Pushes markers to array\n            self\n                .markers\n                .push(marker);\n        });\n        // Event that makes the map center load the original value when closing a\n        // infowindow\n        google\n            .maps\n            .event\n            .addListener(self.infowindow, 'closeclick', function () {\n                self.centerMap();\n            });\n    };\n\n    self.setPlace          = function (marker) {\n        google\n            .maps\n            .event\n            .trigger(marker, 'click');\n    };\n\n    self.centerMap         = function () {\n        self\n            .map\n            .panTo(self.center);\n    };\n\n    self.searchQuery = ko.observable(\"\");\n    self.searchQueryFilter = ko.computed(function () {\n\n        return self\n            .searchQuery()\n            .toLowerCase();\n\n    });\n\n    self.searchLoad        = function () {\n\n        var userInput = self.searchQueryFilter();\n\n        self\n            .markers()\n            .forEach(function (marker) {\n                var eachMarker = marker\n                    .name\n                    .toLowerCase();\n\n                (eachMarker.indexOf(userInput) === -1)\n                    ? marker.setMap(null)\n                    : marker.setMap(self.map);\n                (eachMarker.indexOf(userInput) === -1)\n                    ? marker.listVisible(false)\n                    : marker.listVisible(true);\n\n            });\n    };\n    self.init();\n};\n\n$(ko.applyBindings(new ViewModel()));\n// function initMap() {     var mapDiv = document.getElementById('map');     var\n// map = new google         .maps         .Map(mapDiv, {             center: {\n// lat: 37.776960,                 lng: -122.419588             }, zoom  : 13\n// }); }"],"sourceRoot":"/source/"}